import matplotlib.pyplot as plt
import networkx as nx

# Δημιουργία του γράφου με ισοσταθμισμένη μορφή
G_balanced = nx.DiGraph()

# Κόμβοι και οι σχέσεις τους για το δέντρο απόφασης
G_balanced.add_edges_from([
    ("Έναρξη", "Είναι φοιτητής Α.Ε.Ι.;"),
    ("Είναι φοιτητής Α.Ε.Ι.;", "Όχι (Μη δικαιούχος)"),
    ("Είναι φοιτητής Α.Ε.Ι.;", "Ανήκει σε ευπαθή ομάδα;"),
    
    ("Ανήκει σε ευπαθή ομάδα;", "Εισοδηματικά κριτήρια;"),
    ("Ανήκει σε ευπαθή ομάδα;", "Δικαιούχος-Ευπαθής ομάδα"),
    
    ("Εισοδηματικά κριτήρια;", "Επίδομα ανεργίας;"),
    ("Επίδομα ανεργίας;", "Δικαιούχος-Επίδομα ανεργίας"),
    ("Εισοδηματικά κριτήρια;", "Άγαμος ή Έγγαμος;"),
    ("Άγαμος ή Έγγαμος;", "Άγαμος"),
    ("Άγαμος ή Έγγαμος;", "Έγγαμος"),
    
    # Άγαμος
    ("Άγαμος", "Άνω των 25 ετών"),
    ("Άγαμος", "Κάτω των 25 ετών"),
    ("Άνω των 25 ετών", "Ατομικό εισόδημα ≤ 25.000€;"),
    ("Κάτω των 25 ετών", "Οικογενειακό εισόδημα ≤ 45.000€;"),
    ("Οικογενειακό εισόδημα ≤ 45.000€;", "Δικαιούχος-Οικογενειακό εισόδημα"),
    ("Οικογενειακό εισόδημα ≤ 45.000€;", "Μη δικαιούχος-Οικογενειακό εισόδημα"),
    ("Ατομικό εισόδημα ≤ 25.000€;", "Δικαιούχος-Ατομικό εισόδημα"),
    ("Ατομικό εισόδημα ≤ 25.000€;", "Μη δικαιούχος-Ατομικό εισόδημα"),

    # Έγγαμος
    ("Έγγαμος", "Ετήσιο οικογενειακό εισόδημα ≤ 45.000€;"),
    ("Ετήσιο οικογενειακό εισόδημα ≤ 45.000€;", "Δικαιούχος-Έγγαμος οικογενειακό εισόδημα"),
    ("Ετήσιο οικογενειακό εισόδημα ≤ 45.000€;", "Μη δικαιούχος-Έγγαμος οικογενειακό εισόδημα"),
])

# Σχεδίαση του ισοσταθμισμένου δέντρου απόφασης
plt.figure(figsize=(22, 15))
pos = nx.spring_layout(G_balanced)  # Spring layout για δέντρο που μοιάζει με binary search tree
nx.draw(G_balanced, pos, with_labels=True, node_size=5000, node_color="lightgreen", font_size=10, font_weight='bold', arrowsize=20)
plt.title("Ισοσταθμισμένο Δέντρο Απόφασης για Δωρεάν Σίτιση", size=15)
plt.show()